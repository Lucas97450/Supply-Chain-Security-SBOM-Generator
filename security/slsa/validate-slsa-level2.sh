#!/bin/bash

# Script pour valider SLSA Level 2
# √âtape 6: Validation compl√®te SLSA Level 2

echo "Validation SLSA Level 2..."
echo "=========================="

# Variables
TOTAL_TESTS=0
PASSED_TESTS=0

# Fonction pour tester une √©tape
test_slsa_criteria() {
    local test_name="$1"
    local test_command="$2"
    
    echo "Test: $test_name"
    if eval "$test_command" >/dev/null 2>&1; then
        echo "‚úÖ PASS: $test_name"
        ((PASSED_TESTS++))
    else
        echo "‚ùå FAIL: $test_name"
    fi
    ((TOTAL_TESTS++))
    echo ""
}

echo "1. Validation du Builder Isol√©"
echo "=============================="

# Test 1: V√©rifier que le build se fait dans GitHub Actions
test_slsa_criteria "Build dans environnement contr√¥l√©" "test -f .github/workflows/supply-chain.yml"

# Test 2: V√©rifier la pr√©sence de permissions s√©curis√©es
test_slsa_criteria "Permissions s√©curis√©es configur√©es" "grep -q 'id-token: write' .github/workflows/supply-chain.yml"

# Test 3: V√©rifier la reproductibilit√© (m√™me Dockerfile)
test_slsa_criteria "Build reproductible" "test -f Dockerfile"

echo "2. Validation de la Provenance"
echo "=============================="

# Test 4: V√©rifier la g√©n√©ration de provenance
test_slsa_criteria "G√©n√©ration provenance automatique" "grep -q 'Generate SLSA Provenance' .github/workflows/supply-chain.yml"

# Test 5: V√©rifier la structure de provenance
test_slsa_criteria "Structure provenance valide" "grep -q 'buildType' .github/workflows/supply-chain.yml"

# Test 6: V√©rifier les m√©tadonn√©es de build
test_slsa_criteria "M√©tadonn√©es de build pr√©sentes" "grep -q 'buildInvocationId' .github/workflows/supply-chain.yml"

echo "3. Validation des Signatures"
echo "==========================="

# Test 7: V√©rifier la signature des images
test_slsa_criteria "Signature d'images configur√©e" "grep -q 'cosign sign' .github/workflows/supply-chain.yml"

# Test 8: V√©rifier l'attestation SBOM
test_slsa_criteria "Attestation SBOM configur√©e" "grep -q 'cosign attest.*sbom' .github/workflows/supply-chain.yml"

# Test 9: V√©rifier l'attestation provenance
test_slsa_criteria "Attestation provenance configur√©e" "grep -q 'cosign attest.*slsaprovenance' .github/workflows/supply-chain.yml"

# Test 10: V√©rifier la v√©rification des signatures
test_slsa_criteria "V√©rification signatures configur√©e" "grep -q 'cosign verify' .github/workflows/supply-chain.yml"

echo "4. Validation de la S√©curit√©"
echo "============================"

# Test 11: V√©rifier les politiques de s√©curit√©
test_slsa_criteria "Politiques de s√©curit√© pr√©sentes" "test -f security/policies/security.rego"

# Test 12: V√©rifier la validation des vuln√©rabilit√©s
test_slsa_criteria "Validation vuln√©rabilit√©s configur√©e" "grep -q 'conftest test' .github/workflows/supply-chain.yml"

# Test 13: V√©rifier la g√©n√©ration SBOM
test_slsa_criteria "G√©n√©ration SBOM configur√©e" "grep -q 'syft' .github/workflows/supply-chain.yml"

# Test 14: V√©rifier le scan de vuln√©rabilit√©s
test_slsa_criteria "Scan vuln√©rabilit√©s configur√©" "grep -q 'grype' .github/workflows/supply-chain.yml"

echo "5. Validation des Tests"
echo "======================"

# Test 15: V√©rifier les tests unitaires
test_slsa_criteria "Tests unitaires pr√©sents" "test -f tests/test_security.py"

# Test 16: V√©rifier les tests d'int√©gration
test_slsa_criteria "Tests d'int√©gration configur√©s" "grep -q 'pytest' .github/workflows/supply-chain.yml"

echo "6. Validation de la Documentation"
echo "================================"

# Test 17: V√©rifier la documentation SLSA
test_slsa_criteria "Documentation SLSA pr√©sente" "test -f security/slsa/README.md"

# Test 18: V√©rifier les scripts de validation
test_slsa_criteria "Scripts de validation pr√©sents" "test -f security/slsa/generate-provenance.sh"

echo ""
echo "R√©sultats de la validation SLSA Level 2"
echo "======================================"
echo "Tests pass√©s: $PASSED_TESTS/$TOTAL_TESTS"

if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
    echo ""
    echo "üéâ F√âLICITATIONS! Le projet atteint SLSA Level 2!"
    echo ""
    echo "‚úÖ Builder isol√© dans GitHub Actions"
    echo "‚úÖ Provenance g√©n√©r√©e automatiquement"
    echo "‚úÖ Signatures avec Cosign"
    echo "‚úÖ V√©rification en CI/CD"
    echo "‚úÖ SBOM attest√©"
    echo "‚úÖ Politiques de s√©curit√© valid√©es"
    echo "‚úÖ Tests automatis√©s"
    echo "‚úÖ Documentation compl√®te"
    echo ""
    echo "Le pipeline de s√©curit√© est maintenant cr√©dible et conforme aux standards SLSA Level 2."
else
    echo ""
    echo "‚ö†Ô∏è  ATTENTION: Certains crit√®res SLSA Level 2 ne sont pas satisfaits."
    echo "Tests √©chou√©s: $((TOTAL_TESTS - PASSED_TESTS))"
    echo ""
    echo "Veuillez corriger les tests √©chou√©s pour atteindre SLSA Level 2."
fi

echo ""
echo "D√©tails des crit√®res SLSA Level 2:"
echo "- Builder isol√©: Build dans un environnement contr√¥l√©"
echo "- Provenance: M√©tadonn√©es de build g√©n√©r√©es automatiquement"
echo "- Signatures: Images et attestations sign√©es avec Cosign"
echo "- V√©rification: Signatures v√©rifi√©es en CI/CD"
echo "- S√©curit√©: Politiques de s√©curit√© valid√©es"
echo "- Tests: Tests automatis√©s et complets" 